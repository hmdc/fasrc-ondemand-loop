name: FASRC Build Candidate

on:
  repository_dispatch:
    types: [deployment_build_candidate_command]

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      commit_hash: ${{ steps.commit.outputs.commit_hash }}
      tag: ${{ steps.extract.outputs.tag }}
      env: ${{ steps.extract.outputs.env }}
      branch: ${{ steps.extract.outputs.branch }}
      message: ${{ steps.extract.outputs.message || steps.approval.outputs.message }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Extract metadata and validate parameters
        id: extract
        run: |
          source .github/scripts/utils.sh

          ISSUE_NUMBER="${{ github.event.client_payload.github.payload.issue.number }}"
          REPO="${{ github.repository }}"
          
          # Cache issue JSON
          cache_issue_json "$ISSUE_NUMBER" "$REPO"
          ISSUE_JSON=$(get_issue_json_path)
          
          TITLE=$(jq -r '.title' "$ISSUE_JSON" | tr '[:upper:]' '[:lower:]')
          TAG=$(echo "$TITLE" | grep -oE 'version: *[^ ]+' | sed 's/version: *//')
          
          if [[ ! "$TITLE" =~ ^deployment\ build ]]; then
            set_output "message" "❌ **Issue title must start with Deployment Build**"
            exit 1
          fi
          
          validate_issue "deployment_build"
          
          # RELEASE CANDIDATE => ALWAYS QA
          BRANCH="iqss_qa"
          
          set_output "env" "qa"
          set_output "tag" "$TAG"
          set_output "branch" "$BRANCH"
          
          # Final validation
          if [[ -z "$TAG" || -z "$BRANCH" ]]; then
            set_output "message" "❌ **Tag, and branch are required values**"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get current commit hash
        id: commit
        run: |
          source .github/scripts/utils.sh

          SHA=$(git rev-parse HEAD)
          set_output "commit_hash" "$SHA"

  build:
    needs: validate
    uses: ./.github/workflows/build_from_tag.yml
    with:
      commit_hash: ${{ needs.validate.outputs.commit_hash }}
      tag: ${{ needs.validate.outputs.tag }}
      environment: ${{ needs.validate.outputs.env }}
      branch: ${{ needs.validate.outputs.branch }}
      issue_number: ${{ github.event.client_payload.github.payload.issue.number }}

  comment:
    name: Comment on completion
    needs: [ validate, build ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Compose result title
        id: title
        run: |
          source .github/scripts/utils.sh
          
          STATUS="${{ needs.build.result }}"
          if [ "$STATUS" = "success" ]; then
            set_output "title" "✅ **Deployment build candidate succeeded**"
          else
            set_output "title" "❌ **Deployment build candidate failed**"
          fi

      - name: Post completion comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.client_payload.github.payload.issue.number }}
          body: |
            ${{ steps.title.outputs.title }}
            
            ${{ needs.validate.outputs.message }}
      
            **Commit Hash**: `${{ needs.validate.outputs.commit_hash || 'N/A' }}`  
            **OnDemand Loop Version**: `${{ needs.validate.outputs.tag || 'N/A' }}`  
            **Environment**: `${{ needs.validate.outputs.env || 'N/A' }}`
            **Branch**: [`${{ needs.validate.outputs.branch || 'N/A' }}`](${{ github.server_url }}/${{ github.repository }}/tree/${{ needs.validate.outputs.branch }})
            **Run**: [View workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            _This build candidate was built for verification in QA._
            
            <!-- build-candidate: status=${{ needs.build.result }} commit=${{ needs.validate.outputs.commit_hash }} -->
