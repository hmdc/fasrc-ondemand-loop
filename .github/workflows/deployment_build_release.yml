name: FASRC Build Release

on:
  repository_dispatch:
    types: [deployment_build_release_command]

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      commit_hash: ${{ steps.commit.outputs.commit_hash }}
      release_type: ${{ steps.extract.outputs.release_type }}
      tag: ${{ steps.extract.outputs.tag }}
      env: ${{ steps.extract.outputs.env }}
      message: ${{ steps.extract.outputs.message || steps.approval.outputs.message }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Extract metadata and validate parameters
        id: extract
        run: |
          source .github/scripts/utils.sh
          
          ISSUE_NUMBER="${{ github.event.client_payload.github.payload.issue.number }}"
          REPO="${{ github.repository }}"
          
          # Cache issue JSON
          cache_issue_json "$ISSUE_NUMBER" "$REPO"
          ISSUE_JSON=$(get_issue_json_path)
          
          # GET BUILD CANDIDATE DATA
          BUILD_CANDIDATE_COMMENTS=$(jq -r '.comments[].body | select(test("<!-- build-candidate:"))' "$ISSUE_JSON")
          COMMENT=$(echo "$BUILD_CANDIDATE_COMMENTS" | tail -n 1)
          SHA=$(echo "$COMMENT" | grep -oE 'commit=([a-f0-9]{7,40})' | cut -d= -f2)
          STATUS=$(echo "$COMMENT" | grep -oE 'status=([a-z]+)' | cut -d= -f2)
          
          if [ -z "$SHA" ]; then
            set_output "message" "❌ **Release candidate commit not found in comments**"
            exit 1
          fi
          
          if [ "$STATUS" != "success" ]; then
            set_output "message" "❌ **Last release candidate deployment did not succeed**"
            exit 1
          fi
          
          RELEASE_TYPE="${{ github.event.client_payload.slash_command.args.named.type }}"
          echo "Parsed release type: $RELEASE_TYPE"
          if [[ "$RELEASE_TYPE" != "patch" && "$RELEASE_TYPE" != "minor" && "$RELEASE_TYPE" != "major" ]]; then
            set_output "message" "❌ **Invalid release type: ${RELEASE_TYPE:-N/A}**"
            exit 1
          fi
          
          TITLE=$(jq -r '.title' "$ISSUE_JSON" | tr '[:upper:]' '[:lower:]')
          TAG=$(echo "$TITLE" | grep -oE 'version: *[^ ]+' | sed 's/version: *//')
          
          if [[ ! "$TITLE" =~ ^deployment\ build ]]; then
            set_output "message" "❌ **Issue title must start with Deployment Build**"
            exit 1
          fi
          
          validate_issue "deployment_build"
          
          set_output "commit_hash" "$SHA"
          set_output "release_type" "$RELEASE_TYPE"
          set_output "env" "production"
          set_output "tag" "$TAG"
          
          # Final validation
          if [[ -z "$TAG" ]]; then
            set_output "message" "❌ **Tag, is required value**"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Require approval for Production
        id: approval
        if: ${{ steps.extract.outputs.env == 'production' }}
        run: |
          source .github/scripts/utils.sh
          
          ISSUE="${{ github.event.client_payload.github.payload.issue.number }}"
          APPROVED=$(gh issue view "$ISSUE" --repo "${{ github.repository }}" --json comments --jq \
            '.comments[].body | select(test("(?i)build approved"))')

          if [ -z "$APPROVED" ]; then
            set_output "message" "❌ **Build not approved. Aborting.**"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    needs: validate
    uses: ./.github/workflows/release.yml
    with:
      commit_hash: ${{ needs.validate.outputs.commit_hash }}
      release_type: ${{ needs.validate.outputs.release_type }}

  branch_name:
    name: Build branch name
    needs: [ validate, release ]
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.name.outputs.branch }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Build branch name from versions
        id: name
        run: |
          source .github/scripts/utils.sh
          
          LOOP_TAG="${{ needs.validate.outputs.tag }}"
          BUILD_TAG="${{ needs.release.outputs.version}}"
          # RELEASE => ALWAYS PRODUCTION
          BRANCH="iqss_production_${BUILD_TAG//+/-}_loop_${LOOP_TAG//+/-}"
          set_output "branch" "$BRANCH"

  build:
    needs: [ validate, release, branch_name ]
    uses: ./.github/workflows/build_from_tag.yml
    with:
      commit_hash: ${{ needs.validate.outputs.commit_hash }}
      tag: ${{ needs.validate.outputs.tag }}
      environment: ${{ needs.validate.outputs.env }}
      branch: ${{ needs.branch_name.outputs.branch }}
      issue_number: ${{ github.event.client_payload.github.payload.issue.number }}

  comment:
    name: Comment on completion
    needs: [ validate, release, branch_name, build ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Compose result title
        id: title
        run: |
          source .github/scripts/utils.sh
          
          STATUS="${{ needs.build.result }}"
          if [ "$STATUS" = "success" ]; then
            set_output "title" "✅ **Deployment build succeeded**"
          else
            set_output "title" "❌ **Deployment build failed**"
          fi

      - name: Post completion comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.client_payload.github.payload.issue.number }}
          body: |
            ${{ steps.title.outputs.title }}
            
            ${{ needs.validate.outputs.message }}
            
            **Release Type**: `${{ needs.validate.outputs.release_type || 'N/A' }}`
            **Version**: `${{ needs.release.outputs.version || 'N/A' }}`
            **Notes**: [View GitHub Release Notes](${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.release.outputs.version }})
            **Commit Hash**: `${{ needs.validate.outputs.commit_hash || 'N/A' }}`
            
            **OnDemand Loop Version**: `${{ needs.validate.outputs.tag || 'N/A' }}`
            **Environment**: `${{ needs.validate.outputs.env || 'N/A' }}`
            **Branch**: [`${{ needs.branch_name.outputs.branch || 'N/A' }}`](${{ github.server_url }}/${{ github.repository }}/tree/${{ needs.branch_name.outputs.branch }})
            **Run**: [View workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            <!-- build-release: status=${{ needs.build.result }} tag=${{ needs.release.outputs.version }} -->
