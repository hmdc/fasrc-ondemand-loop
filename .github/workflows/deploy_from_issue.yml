name: FASRC Deployment From Issue Command

on:
  repository_dispatch:
    types: [deploy_command]

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.extract.outputs.tag }}
      env: ${{ steps.extract.outputs.env }}
      branch: ${{ steps.extract.outputs.branch }}
      message: ${{ steps.extract.outputs.message }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Extract version and map environment to branch
        id: extract
        run: |
          source .github/scripts/utils.sh

          ENVIRONMENT="${{ github.event.client_payload.slash_command.args.named.env }}"
          ENVIRONMENT=$(echo "$ENVIRONMENT" | tr '[:upper:]' '[:lower:]')
          ISSUE_NUMBER="${{ github.event.client_payload.github.payload.issue.number }}"
          TITLE=$(gh issue view "$ISSUE_NUMBER" --repo "${{ github.repository }}" --json title --jq '.title')
          TAG=$(echo "$TITLE" | grep -oE 'version: *[^ ]+' | sed 's/version: *//')
          
          if [[ ! "$TITLE" =~ ^[Dd]eployment ]]; then
            set_output "message" "❌ **Issue title must start with Deployment**"
            exit 1
          fi

          case "$ENVIRONMENT" in
            qa)
              BRANCH="iqss_qa"
              ;;
            production)
              BRANCH="iqss_production"
              ;;
            *)
              set_output "message" "❌ **Unknown environment: $ENVIRONMENT**"
              exit 1
              ;;
          esac

          set_output "env" "$ENVIRONMENT"
          set_output "tag" "$TAG"
          set_output "branch" "$BRANCH"
          
          # Final validation
          if [[ -z "$ENVIRONMENT" || -z "$TAG" || -z "$BRANCH" ]]; then
            set_output "message" "❌ **Environment, tag, and branch are required values**"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Require approval for Production
        if: ${{ steps.extract.outputs.env == 'production' }}
        run: |
          source .github/scripts/utils.sh
          
          ISSUE="${{ github.event.client_payload.github.payload.issue.number }}"
          APPROVED=$(gh issue view "$ISSUE" --repo "${{ github.repository }}" --json comments --jq \
            '.comments[].body | select(test("(?i)deployment approved"))')

          if [ -z "$APPROVED" ]; then
            set_output "message" "❌ **Deployment not approved. Aborting.**"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: validate
    uses: ./.github/workflows/deploy_from_tag.yml
    with:
      tag: ${{ needs.validate.outputs.tag }}
      environment: ${{ needs.validate.outputs.env }}
      branch: ${{ needs.validate.outputs.branch }}

  comment:
    name: Comment on Deployment Success
    needs: [ validate, deploy ]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Compose result title
        id: title
        run: |
          source .github/scripts/utils.sh
          
          STATUS="${{ needs.deploy.result }}"
          if [ "$STATUS" = "success" ]; then
            set_output "title" "✅ **Deployment succeeded**"
          else
            set_output "title" "❌ **Deployment failed**"
          fi

      - name: Post deployment comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.client_payload.github.payload.issue.number }}
          body: |
            ${{ steps.title.outputs.title }}
            
            ${{ needs.validate.outputs.message }}
      
            **Version**: `${{ needs.validate.outputs.tag }}`  
            **Environment**: `${{ needs.validate.outputs.env }}`
            **Branch**: `${{ needs.validate.outputs.branch }}`
            **Run**: [View workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
